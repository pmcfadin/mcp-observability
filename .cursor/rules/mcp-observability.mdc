---
description:
globs:
alwaysApply: false
---
---

description: >
Workflow guardrails for AI automation agents in this repository. Enforces
disciplined project management via GitHub Issues and the `gh` CLI. Should be
included **Always** to ensure agents create, track, and close work items
transparently.
rule\_type: Always
------------------

# 🛠️  Cursor Rule – AI Agent Workflow via GitHub Issues

## 1. Create‑Before‑Code

* **MUST** create a GitHub Issue for every non‑trivial task (≥ 10 lines of code or config).
* Use `gh issue create --title "<concise action>" --body "<goal / acceptance criteria>" --label "ai-task"`.
* Include context‑link back to the originating prompt or reference.

## 2. Granular Task Sizing

* Break large work into issues estimated ≤ 4 hours of agent effort.
* Cross‑link parent/child issues via `gh issue comment <id> "Tracks #<child>"`.

## 3. Progress Logging

* On **start** of work: `gh issue comment <id> "⏳ Started. Branch: <branch-name>"`.
* After each meaningful commit: `git commit -m "<feat|fix>: <summary> (refs #<id>)"` then push.
* Use `gh issue comment` to post logs or blockers. Prefix with emojis:

  * `🚧` Work in progress
  * `❗` Need input
  * `✅` Completed sub‑task

## 4. Branch & PR Naming

* Branches: `ai/<issue-id>-<slug>`
* PRs: `gh pr create --title "Close #<id>: <summary>" --body "AI‑generated implementation."`

## 5. Closing the Loop

* When work is complete: `gh issue close <id> --comment "✅ Done. See PR #<pr-id>."`
* CI must reference closed issues for auditability.

## 6. Rate Limits & Etiquette

* **Do NOT** create more than 5 open issues per hour.
* Consolidate related comments—avoid spam.

## 7. Fallback / Errors

* If `gh` command fails, log the full stderr in the issue comment `❗ gh error`. Retry twice max.
* If GitHub API outage detected, pause work and comment `⚠️ GitHub outage – pausing`.

## 8. Security & Secrets

* Never include credentials, tokens, or personal data in issues or comments.
* Redact log output before posting.

## 9. Style Reminders

* Follow repo coding conventions (see other Cursor Rules).
* Each PR **must** pass lint + unit tests before closing the issue.

---

## 15 · Python Coding Best Practices

Follow these conventions when contributing Python code to the **MCP Server** or related tools:

| Area                | Guideline                                                                                                       |
| ------------------- | --------------------------------------------------------------------------------------------------------------- |
| **Version**         | Target **Python 3.11**; define in `pyproject.toml` with `requires-python = ">=3.12"`.                           |
| **Style**           | Enforce **PEP 8** via **Black** (`line-length = 88`) and **isort** for deterministic imports.                   |
| **Typing**          | Full **type hints** required; CI runs `mypy --strict`.                                                          |
| **Docstrings**      | Use **Google‑style docstrings**; public APIs require parameter & return docs.                                   |
| **Logging**         | Implement structured logging with **structlog** → JSON; include `service`, `trace_id`, `level`.                 |
| **Error Handling**  | Throw custom exceptions (`class MCPError(Exception)`) with concise messages; never swallow exceptions silently. |
| **Concurrency**     | Prefer `async def` / `await`; offload blocking ops to threadpool executor.                                      |
| **Resources**       | Wrap IO in `with` context managers; prohibit bare `close()` calls.                                              |
| **Strings & Paths** | Use **f‑strings** and **`pathlib.Path`**; avoid `%` or `os.path` joins.                                         |
| **Testing**         | **pytest** + `pytest‑asyncio`, ≥ 90 % coverage; mock external services.                                         |
| **Linting**         | CI chain: `flake8`, `black --check`, `isort --check`, `pydocstyle`.                                             |
| **Dependencies**    | Keep minimal in `pyproject.toml`; dev extras in `[tool.poetry.group.dev]`.                                      |
| **Statelessness**   | No global mutable state; design functions to be pure or side‑effect controlled.                                 |

---

*Generated 15 Jun 2025*
